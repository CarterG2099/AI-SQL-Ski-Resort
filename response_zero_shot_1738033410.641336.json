{
  "strategy": "zero_shot",
  "prompt_prefix": "create table ikon_users (\n    user_id integer primary key,\n    first_name varchar(50) not null,\n    last_name varchar(50) not null,\n    email varchar(100) unique not null,\n    date_of_birth text,\n    skill_level varchar(20) not null check (skill_level in ('Beginner', 'Intermediate', 'Advanced', 'Expert'))\n);\n\ncreate table ikon_resorts (\n    resort_id integer primary key,\n    name varchar(100) not null,\n    location varchar(255) not null,\n    elevation integer,\n    total_trails integer\n);\n\ncreate table ikon_phone (\n    phone_id integer primary key,\n    entity_id integer not null,\n    entity_type varchar(20) not null check (entity_type in ('User', 'Resort')),\n    phone_number varchar(15) not null\n);\n\ncreate table ikon_address (\n    address_id integer primary key,\n    entity_id integer not null,\n    entity_type varchar(20) not null check (entity_type in ('User', 'Resort')),\n    street varchar(255) not null,\n    city varchar(100) not null,\n    state varchar(50) not null,\n    zip_code varchar(20) not null\n);\n\ncreate table ikon_trails (\n    trail_id integer primary key,\n    resort_id integer not null,\n    name varchar(100) not null,\n    difficulty varchar(20) not null check (difficulty in ('Green', 'Blue', 'Black', 'Double Black')),\n    length_km real,\n    foreign key (resort_id) references ikon_resorts (resort_id)\n);\n\ncreate table ikon_rentals (\n    rental_id integer primary key,\n    user_id integer not null,\n    equipment_type varchar(20) not null check (equipment_type in ('Ski', 'Snowboard', 'Boots', 'Helmet')),\n    rental_date text not null,\n    return_date text,\n    cost real,\n    foreign key (user_id) references ikon_users (user_id)\n);\n\ncreate table ikon_events (\n    event_id integer primary key,\n    resort_id integer not null,\n    name varchar(100) not null,\n    event_date text not null,\n    description text,\n    foreign key (resort_id) references ikon_resorts (resort_id)\n);\n\ncreate table ikon_lift_tickets (\n    ticket_id integer primary key,\n    user_id integer not null,\n    resort_id integer not null,\n    ticket_type varchar(20) not null check (ticket_type in ('Base', 'Session', 'Plus')),\n    purchase_date text not null,\n    price real,\n    foreign key (user_id) references ikon_users (user_id),\n    foreign key (resort_id) references ikon_resorts (resort_id)\n);\n\ncreate table ikon_weather_reports (\n    report_id integer primary key,\n    resort_id integer not null,\n    report_date text not null,\n    temperature_c real,\n    snow_depth_cm integer,\n    conditions varchar(20) not null check (conditions in ('Sunny', 'Cloudy', 'Snowing', 'Windy')),\n    foreign key (resort_id) references ikon_resorts (resort_id)\n);\n\ncreate table ikon_reviews (\n    review_id integer primary key,\n    user_id integer not null,\n    resort_id integer not null,\n    rating integer check (rating >= 1 and rating <= 5),\n    review_text text,\n    review_date text not null,\n    foreign key (user_id) references ikon_users (user_id),\n    foreign key (resort_id) references ikon_resorts (resort_id)\n);\n Give me a sqlite select statement that answers the question. Only respond with sqlite syntax. If there is an error do not expalin it!",
  "questionResults": [
    {
      "question": "Which are the highest rated resorts and what is the average rating of each?",
      "sql": "\nSELECT r.name, AVG(re.rating) AS average_rating\nFROM ikon_reviews re\nJOIN ikon_resorts r ON re.resort_id = r.resort_id\nGROUP BY r.resort_id\nORDER BY average_rating DESC;\n",
      "queryRawResponse": "[('Whistler Blackcomb', 4.333333333333333), ('Park City Mountain', 4.0), ('Aspen Snowmass', 4.0)]",
      "friendlyResponse": "The highest-rated resorts are:\n\n- Whistler Blackcomb: 4.33\n- Park City Mountain: 4.0\n- Aspen Snowmass: 4.0",
      "error": "None"
    },
    {
      "question": "Which users rented equipment for more than 3 days and which resorts did they visit and what was the total cost of their trip including equipment and lift ticket?",
      "sql": "\nSELECT \n    u.user_id, \n    u.first_name, \n    u.last_name, \n    r.name AS resort_name, \n    SUM(COALESCE(rental.cost, 0)) + SUM(COALESCE(t.price, 0)) AS total_cost\nFROM ikon_users u\nJOIN ikon_rentals rental ON u.user_id = rental.user_id\nJOIN ikon_lift_tickets t ON u.user_id = t.user_id\nJOIN ikon_resorts r ON t.resort_id = r.resort_id\nWHERE julianday(rental.return_date) - julianday(rental.rental_date) > 3\nGROUP BY u.user_id, r.resort_id;\n",
      "queryRawResponse": "[(1, 'Laura', 'Stevenson', 'Aspen Snowmass', 320.0), (2, 'Bob', 'Jones', 'Whistler Blackcomb', 330.0)]",
      "friendlyResponse": "Sure! Here are the users who rented equipment for more than 3 days:\n\n1. Laura Stevenson - Aspen Snowmass: $320.00\n2. Bob Jones - Whistler Blackcomb: $330.00",
      "error": "None"
    },
    {
      "question": "What is the ratio of people who rent equipment and ski double black vs those who ski blue?",
      "sql": "\nSELECT \n    (SELECT COUNT(DISTINCT user_id) \n     FROM ikon_rentals \n     WHERE equipment_type IN ('Ski', 'Snowboard') \n     AND user_id IN (SELECT user_id FROM ikon_reviews WHERE rating >= 1 AND resort_id IN (SELECT resort_id FROM ikon_trails WHERE difficulty = 'Double Black'))) AS double_black_rentals,\n    (SELECT COUNT(DISTINCT user_id) \n     FROM ikon_rentals \n     WHERE equipment_type IN ('Ski', 'Snowboard') \n     AND user_id IN (SELECT user_id FROM ikon_reviews WHERE rating >= 1 AND resort_id IN (SELECT resort_id FROM ikon_trails WHERE difficulty = 'Blue'))) AS blue_rentals,\n    CASE \n        WHEN (SELECT COUNT(DISTINCT user_id) \n              FROM ikon_rentals \n              WHERE equipment_type IN ('Ski', 'Snowboard') \n              AND user_id IN (SELECT user_id FROM ikon_reviews WHERE rating >= 1 AND resort_id IN (SELECT resort_id FROM ikon_trails WHERE difficulty = 'Blue'))) = 0 \n        THEN NULL \n        ELSE (SELECT COUNT(DISTINCT user_id) \n              FROM ikon_rentals \n              WHERE equipment_type IN ('Ski', 'Snowboard') \n              AND user_id IN (SELECT user_id FROM ikon_reviews WHERE rating >= 1 AND resort_id IN (SELECT resort_id FROM ikon_trails WHERE difficulty = 'Double Black'))) * 1.0 / \n              (SELECT COUNT(DISTINCT user_id) \n              FROM ikon_rentals \n              WHERE equipment_type IN ('Ski', 'Snowboard') \n              AND user_id IN (SELECT user_id FROM ikon_reviews WHERE rating >= 1 AND resort_id IN (SELECT resort_id FROM ikon_trails WHERE difficulty = 'Blue'))) \n        END AS ratio;\n",
      "queryRawResponse": "[(2, 2, 1.0)]",
      "friendlyResponse": "The ratio of people who rent equipment and ski double black to those who ski blue is 2:2, or 1:1.",
      "error": "None"
    },
    {
      "question": "What is the average temperature and snow depth for each resort in January 2025?",
      "sql": "\nSELECT r.name, \n       AVG(wr.temperature_c) AS average_temperature, \n       AVG(wr.snow_depth_cm) AS average_snow_depth\nFROM ikon_weather_reports wr\nJOIN ikon_resorts r ON wr.resort_id = r.resort_id\nWHERE strftime('%Y-%m', wr.report_date) = '2025-01'\nGROUP BY r.resort_id;\n",
      "queryRawResponse": "[('Aspen Snowmass', -5.0, 50.0), ('Whistler Blackcomb', -3.0, 60.0), ('Park City Mountain', -8.0, 70.0)]",
      "friendlyResponse": "Sure! Here are the average temperatures and snow depths for each resort in January 2025:\n\n- **Aspen Snowmass**: -5.0\u00b0C, 50.0 cm snow\n- **Whistler Blackcomb**: -3.0\u00b0C, 60.0 cm snow\n- **Park City Mountain**: -8.0\u00b0C, 70.0 cm snow",
      "error": "None"
    },
    {
      "question": "Which people travelled out of state to ski and what was the total cost of their trip?",
      "sql": "\nSELECT u.first_name, u.last_name, SUM(r.cost) AS total_trip_cost\nFROM ikon_users u\nJOIN ikon_rentals r ON u.user_id = r.user_id\nJOIN ikon_address a ON u.user_id = a.entity_id AND a.entity_type = 'User'\nWHERE a.state != (SELECT state FROM ikon_address WHERE entity_id = u.user_id AND entity_type = 'User' LIMIT 1)\nGROUP BY u.user_id;\n",
      "queryRawResponse": "[]",
      "friendlyResponse": "It looks like no one traveled out of state to ski.",
      "error": "None"
    },
    {
      "question": "What is the ratio of people who got the base, session, and plus passes and what is the total revenue from those passes?",
      "sql": "\nSELECT \n    ticket_type, \n    COUNT(user_id) AS num_tickets, \n    SUM(price) AS total_revenue \nFROM \n    ikon_lift_tickets \nGROUP BY \n    ticket_type;\n",
      "queryRawResponse": "[('Base', 1, 120.0), ('Plus', 1, 200.0), ('Session', 1, 150.0)]",
      "friendlyResponse": "The ratio of passes is: Base - 1, Plus - 1, Session - 1. The total revenue from these passes is $470.00.",
      "error": "None"
    },
    {
      "question": "Which resort has the highest elevation, and how many trails does it offer?",
      "sql": "\nSELECT name, elevation, total_trails \nFROM ikon_resorts \nORDER BY elevation DESC \nLIMIT 1;\n",
      "queryRawResponse": "[('Aspen Snowmass', 8104, 150)]",
      "friendlyResponse": "The resort with the highest elevation is Aspen Snowmass, at 8,104 feet, offering 150 trails.",
      "error": "None"
    },
    {
      "question": "What is the distribution of skill levels among users who visited Aspen Snowmass?",
      "sql": "\nSELECT u.skill_level, COUNT(*) AS user_count\nFROM ikon_users u\nJOIN ikon_lift_tickets lt ON u.user_id = lt.user_id\nJOIN ikon_resorts r ON lt.resort_id = r.resort_id\nWHERE r.name = 'Aspen Snowmass'\nGROUP BY u.skill_level;\n",
      "queryRawResponse": "[('Advanced', 1)]",
      "friendlyResponse": "It looks like the only skill level noted was \"Advanced\" with 1 user.",
      "error": "None"
    },
    {
      "question": "What is the average length of 'Green' trails across all resorts?",
      "sql": "\nSELECT AVG(length_km) AS average_length\nFROM ikon_trails\nWHERE difficulty = 'Green';\n",
      "queryRawResponse": "[(6.0,)]",
      "friendlyResponse": "The average length of \"Green\" trails across all resorts is 6.0 miles.",
      "error": "None"
    },
    {
      "question": "Which resort has the highest combined rating from all user reviews?",
      "sql": "\nSELECT resort_id, SUM(rating) as total_rating\nFROM ikon_reviews\nGROUP BY resort_id\nORDER BY total_rating DESC\nLIMIT 1;\n",
      "queryRawResponse": "[(2, 26)]",
      "friendlyResponse": "The resort with the highest combined rating from all user reviews is Resort 2, with a rating of 26.",
      "error": "None"
    }
  ]
}